const { PREFIX } = require(`${BASE_DIR}/config`);
const { isGroup, toUserOrGroupJid } = require(`${BASE_DIR}/utils`);
const { errorLog } = require(`${BASE_DIR}/utils/logger`);

module.exports = {
  name: "rebaixar",
  description: "Tira o poderzinho de admin de quem jÃ¡ se achou demais.",
  commands: ["rebaixar", "rebaixa", "demote"],
  usage: `${PREFIX}rebaixar @usuario`,

  /**
   * @param {CommandHandleProps} props
   * @returns {Promise<void>}
   */
  handle: async ({
    args,
    remoteJid,
    socket,
    sendWarningReply,
    sendSuccessReply,
    sendErrorReply,
  }) => {
    if (!isGroup(remoteJid)) {
      return sendWarningReply("ðŸ“› Esse comando sÃ³ funciona em grupo. Nem tenta no privado, por favor.");
    }

    if (!args.length || !args[0]) {
      return sendWarningReply("ðŸ«µ Marca alguÃ©m primeiro, gÃªnio. Preciso saber quem vocÃª quer rebaixar.");
    }

    const userId = toUserOrGroupJid(args[0]);

    try {
      await socket.groupParticipantsUpdate(remoteJid, [userId], "demote");
      await sendSuccessReply("ðŸª« UsuÃ¡rio rebaixado com sucesso! O cargo subiu Ã  cabeÃ§a? Problema resolvido.");
    } catch (error) {
      errorLog(`Erro ao rebaixar administrador: ${error.message}`);
      await sendErrorReply(
        "ðŸš« NÃ£o consegui rebaixar o ser. Provavelmente porque eu nÃ£o sou admin â€” que ironia, nÃ©?"
      );
    }
  },
};
