const { PREFIX } = require(`${process.cwd()}/src/config`);
const yts = require("yt-search");
const fs = require("fs");
const path = require("path");
const { spawn } = require("child_process");

module.exports = {
  name: "play",
  description: "Busca e baixa v√≠deos do YouTube e converte para MP3 usando FFmpeg",
  commands: ["play", "music", "ytmp3", "playaudio"],
  usage: `${PREFIX}play <nome da m√∫sica>`,

  handle: async function (data) {
    const {
      sendReply,
      args,
      userJid,
      message,
      sendAudioFromFile,
      sendImageFromURL,
      sendWaitReact,
      sendErrorReact,
      sendSuccessReact,
    } = data;

    if (!args.length) {
      return await sendReply(
        `üéµ *PLAY MUSIC COMMAND*
‚ùå *Uso incorreto!*
üìù *Como usar:*
${PREFIX}play <nome da m√∫sica>
üí° *Exemplo:*
${PREFIX}play Nirvana Come As You Are`,
        [userJid]
      );
    }

    const query = args.join(" ");
    const tempDir = path.join(process.cwd(), "assets", "temp");
    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });

    try {
      if (sendWaitReact) await sendWaitReact();

      // Buscar v√≠deo no YouTube
      const searchResults = await yts(query);
      const video = searchResults.videos[0];
      if (!video) {
        if (sendErrorReact) await sendErrorReact();
        return await sendReply(`‚ùå *M√öSICA N√ÉO ENCONTRADA*\nüîç Pesquisa: ${query}`, [userJid]);
      }

      const videoUrl = `https://www.youtube.com/watch?v=${video.videoId}`;
      const timestamp = Date.now();
      const videoFile = path.join(tempDir, `video_${timestamp}.mp4`);
      const audioFile = path.join(tempDir, `audio_${timestamp}.mp3`);

      // Baixar v√≠deo em MP4 (igual ao playvideo)
      const ytDlpCommand = [
        "yt-dlp",
        "-f", "mp4",
        "-o", videoFile,
        videoUrl,
      ];

      await new Promise((resolve, reject) => {
        const proc = spawn(ytDlpCommand[0], ytDlpCommand.slice(1));
        let errorOutput = "";

        const timeout = setTimeout(() => {
          proc.kill();
          reject(new Error("Timeout - download do v√≠deo muito lento"));
        }, 300000); // at√© 5 minutos

        proc.stderr.on("data", (data) => { errorOutput += data.toString(); });
        proc.on("close", (code) => {
          clearTimeout(timeout);
          code === 0 ? resolve() : reject(new Error(`yt-dlp falhou: ${errorOutput || code}`));
        });
        proc.on("error", (err) => reject(new Error(`Erro ao executar yt-dlp: ${err.message}`)));
      });

      // Verificar se o v√≠deo foi baixado corretamente
      if (!fs.existsSync(videoFile) || fs.statSync(videoFile).size < 10000) {
        throw new Error("Arquivo de v√≠deo inv√°lido ou muito pequeno");
      }

      // Converter v√≠deo para MP3 usando FFmpeg
      await new Promise((resolve, reject) => {
        const ffmpegCommand = [
          "ffmpeg",
          "-i", videoFile,
          "-vn", // remove v√≠deo
          "-acodec", "libmp3lame",
          "-ab", "192k", // bitrate de √°udio
          "-ar", "44100", // sample rate
          "-y", // sobrescrever arquivo existente
          audioFile
        ];

        const proc = spawn(ffmpegCommand[0], ffmpegCommand.slice(1));
        let errorOutput = "";

        const timeout = setTimeout(() => {
          proc.kill();
          reject(new Error("Timeout - convers√£o FFmpeg muito lenta"));
        }, 120000); // at√© 2 minutos para convers√£o

        proc.stderr.on("data", (data) => { errorOutput += data.toString(); });
        proc.on("close", (code) => {
          clearTimeout(timeout);
          code === 0 ? resolve() : reject(new Error(`FFmpeg falhou: ${errorOutput || code}`));
        });
        proc.on("error", (err) => reject(new Error(`Erro ao executar FFmpeg: ${err.message}`)));
      });

      // Verificar se o √°udio foi convertido corretamente
      if (!fs.existsSync(audioFile) || fs.statSync(audioFile).size < 10000) {
        throw new Error("Arquivo de √°udio inv√°lido ou muito pequeno");
      }

      // Informa√ß√µes da m√∫sica
      const infoMsg = `
üéµ *M√öSICA ENCONTRADA!*
üé∂ *T√≠tulo:* ${video.title}
üë§ *Artista/Canal:* ${video.author?.name || "Desconhecido"}
‚è±Ô∏è *Dura√ß√£o:* ${video.duration?.timestamp || "Desconhecido"}
üëÅÔ∏è *Visualiza√ß√µes:* ${video.views || "N/A"}
üîß *Convers√£o:* FFmpeg
      `.trim();

      // Enviar thumbnail com informa√ß√µes
      await sendImageFromURL(video.thumbnail, infoMsg, [userJid], message);
      
      // ‚úÖ CORRE√á√ÉO: Enviar √°udio como arquivo normal (n√£o como voz)
      // asVoice: false para permitir reprodu√ß√£o normal
      await sendAudioFromFile(audioFile, false, message);

      if (sendSuccessReact) await sendSuccessReact();

      // Limpeza dos arquivos tempor√°rios ap√≥s 30 segundos
      setTimeout(() => {
        try {
          if (fs.existsSync(videoFile)) fs.unlinkSync(videoFile);
          if (fs.existsSync(audioFile)) fs.unlinkSync(audioFile);
          console.log(`[CLEANUP] Arquivos tempor√°rios removidos: ${audioFile}`);
        } catch (cleanupError) {
          console.error("[CLEANUP ERROR]", cleanupError);
        }
      }, 30000); // 30 segundos para garantir o download

    } catch (error) {
      console.error("[PLAY MUSIC ERROR]", error);
      if (sendErrorReact) await sendErrorReact();
      await sendReply(`‚ùå *ERRO NO DOWNLOAD/CONVERS√ÉO*\n${error.message}`, [userJid]);
    }
  },
};
    
